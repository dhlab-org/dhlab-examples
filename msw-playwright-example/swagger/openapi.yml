openapi: 3.1.0
info:
  title: Blog API
  description: API for managing blog posts, comments and users
  version: 1.0.0
servers:
  - url: https://example.com/api/v1
    description: Local development server

paths:
  /login:
    post:
      tags:
        - auth
      summary: User login
      description: Authenticate user by userId and return user information
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: User not found
        "400":
          description: Invalid input

  /users:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users
      operationId: get_users_users_get
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                title: Response Get Users Users Get
    post:
      tags:
        - users
      summary: Create a new user
      description: Add a new user to the system
      operationId: create_user_users_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
                title: Response Create User Users Post
        "400":
          description: Invalid input

  /users/{id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: Get a specific user by their ID
      operationId: get_user_users_id_get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
                title: Response Get User Users Id Get
        "404":
          description: User not found
  
  /posts:
    get:
      tags:
        - posts
      summary: Get all posts
      description: Retrieve a list of all blog posts
      operationId: get_posts
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"
                  total:
                    type: integer
                  page:
                    type: integer
                  totalPages:
                    type: integer
    post:
      tags:
        - posts
      summary: Create a new post
      description: Create a new blog post
      operationId: create_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInput"
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Invalid input

  /posts/{id}:
    get:
      tags:
        - posts
      summary: Get post by ID
      description: Get a specific blog post by its ID
      operationId: get_post_by_id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
    put:
      tags:
        - posts
      summary: Update post
      description: Update an existing blog post
      operationId: update_post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostInput"
      responses:
        "200":
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
    delete:
      tags:
        - posts
      summary: Delete post
      description: Delete a blog post
      operationId: delete_post
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Post deleted successfully
        "404":
          description: Post not found

  /posts/{postId}/comments:
    get:
      tags:
        - comments
      summary: Get post comments
      description: Get all comments for a specific post
      operationId: get_post_comments
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"
    post:
      tags:
        - comments
      summary: Add comment
      description: Add a new comment to a post
      operationId: create_comment
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput"
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: Post not found

  /comments/{id}:
    put:
      tags:
        - comments
      summary: Update comment
      description: Update an existing comment
      operationId: update_comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput"
      responses:
        "200":
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "404":
          description: Comment not found
    delete:
      tags:
        - comments
      summary: Delete comment
      description: Delete a comment
      operationId: delete_comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Comment deleted successfully
        "404":
          description: Comment not found

components:
  schemas:
    LoginInput:
      type: object
      title: LoginInput
      properties:
        userId:
          type: string
          minLength: 1
      required:
        - userId

    User:
      type: object
      title: User
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - username
        - email

    UserInput:
      type: object
      title: UserInput
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
      required:
        - username
        - email

    Product:
      type: object
      title: Product
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - price
        - stock

    ProductInput:
      type: object
      title: ProductInput
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        price:
          type: number
          format: float
          minimum: 0
        stock:
          type: integer
          minimum: 0
      required:
        - name
        - price
        - stock

    Order:
      type: object
      title: Order
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        totalAmount:
          type: number
          format: float
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, CANCELLED]
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - items
        - totalAmount
        - status

    OrderItem:
      type: object
      title: OrderItem
      properties:
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          format: float
      required:
        - productId
        - quantity
        - price

    OrderInput:
      type: object
      title: OrderInput
      properties:
        userId:
          type: string
          format: uuid
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                format: uuid
              quantity:
                type: integer
                minimum: 1
            required:
              - productId
              - quantity
      required:
        - userId
        - items

    Post:
      type: object
      title: Post
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        userId:
          type: string
          format: uuid
        author:
          $ref: "#/components/schemas/User"
        status:
          type: string
          enum: [DRAFT, PUBLISHED]
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - title
        - content
        - userId
        - status
        - createdAt

    PostInput:
      type: object
      title: PostInput
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
        status:
          type: string
          enum: [DRAFT, PUBLISHED]
        tags:
          type: array
          items:
            type: string
      required:
        - title
        - content
        - status

    Comment:
      type: object
      title: Comment
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        userId:
          type: string
          format: uuid
        postId:
          type: string
          format: uuid
        author:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - content
        - userId
        - postId
        - createdAt

    CommentInput:
      type: object
      title: CommentInput
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 1000
      required:
        - content
