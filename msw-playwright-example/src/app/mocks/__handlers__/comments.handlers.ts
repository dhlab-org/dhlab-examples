/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/dhlab-org/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck

import { selectResponseByScenario } from '@dhlab/msw-auto-mock';
import { faker } from '@faker-js/faker';
import { bypass, HttpResponse, http, passthrough } from 'msw';
import { scenarios } from '../scenarios';

faker.seed(1);

const baseURL = 'https://example.com/api/v1';

export const commentsHandlers = [
  http.put(`${baseURL}/comments/:id`, async (info) => {
    const isBypass = info.request.headers.get('x-bypass') === 'true';

    if (isBypass) {
      try {
        const originalResponse = await fetch(bypass(info.request));
        if (originalResponse.status !== 404) {
          return passthrough();
        }
      } catch (error) {
        console.warn('[MSW] Bypass 실패, mock 데이터 사용:', error);
      }
    }

    const resultArray = [
      {
        status: 200,
        responseType: 'application/json',
        body: JSON.stringify(await getUpdateComment200Response(info)),
      },
      {
        status: 404,
        responseType: undefined,
        body: undefined,
      },
    ];
    const selectedResult = selectResponseByScenario('put', '/comments/:id', resultArray, info, scenarios);

    return new HttpResponse(selectedResult.body, {
      status: selectedResult.status,
      headers: selectedResult.responseType
        ? {
            'Content-Type': selectedResult.responseType,
          }
        : undefined,
    });
  }),

  http.delete(`${baseURL}/comments/:id`, async (info) => {
    const isBypass = info.request.headers.get('x-bypass') === 'true';

    if (isBypass) {
      try {
        const originalResponse = await fetch(bypass(info.request));
        if (originalResponse.status !== 404) {
          return passthrough();
        }
      } catch (error) {
        console.warn('[MSW] Bypass 실패, mock 데이터 사용:', error);
      }
    }

    const resultArray = [
      {
        status: 204,
        responseType: undefined,
        body: undefined,
      },
      {
        status: 404,
        responseType: undefined,
        body: undefined,
      },
    ];
    const selectedResult = selectResponseByScenario('delete', '/comments/:id', resultArray, info, scenarios);

    return new HttpResponse(selectedResult.body, {
      status: selectedResult.status,
      headers: selectedResult.responseType
        ? {
            'Content-Type': selectedResult.responseType,
          }
        : undefined,
    });
  }),
];

export function getUpdateComment200Response() {
  return {
    id: faker.string.uuid(),
    content: faker.lorem.words(),
    userId: faker.string.uuid(),
    postId: faker.string.uuid(),
    author: {
      id: faker.string.uuid(),
      username: faker.person.fullName(),
      email: faker.internet.email(),
      createdAt: faker.date.past(),
    },
    createdAt: faker.date.past(),
    updatedAt: faker.date.past(),
  };
}
